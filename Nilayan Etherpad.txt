DOCLERS

#hostname
#ip a
d# cat /etc/resolv.conf
#cat /etc/hosts
10.0.15.X        node3.example.com    node3

  #yum list docker
  #yum install docker*

  Verify:
      #docker <enter>
      
      #docker images
      #docker search ubi
      #docker pull registry.access.redhat.com/ubi7
      #docker run --name myos registry.access.redhat.com/ubi7 
      ==============
      #docker search httpd
      #docker run --name myweb registry.access.redhat.com/ubi9/httpd-24
      This will run in fore-ground
      Terminate the same and apply below command
      
      #docker run -d --name myweb2 registry.access.redhat.com/ubi/httpd-24
      Now it should run in background
      
      #docker inspect myweb2
      #docker exec myweb2 cat /etc/resolv.conf
      #docker exec -it myweb2 /bin/bash 
      
      [root@node3 ~]# docker exec -it myweb2 /bin/bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
bash-5.1$ cd /var/www/html
bash-5.1$ cat > index.html
Welcome to DevOps!!!
bash-5.1$ curl localhost:8080
Welcome to DevOps!!!
bash-5.1$ 

      ===============
*      31Jan2025:
      
      
[root@node3 ~]# docker start myweb2 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb2
[root@node3 ~]# docker ps 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED       STATUS        PORTS       NAMES
533e4a0c937c  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  21 hours ago  Up 4 seconds              myweb2
[root@node3 ~]# docker stop myweb2
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb2
[root@node3 ~]# docker ps 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES
[root@node3 ~]# docker ps -a 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED       STATUS                    PORTS       NAMES
70d66fc22269  registry.access.redhat.com/ubi7:latest           /bin/bash             22 hours ago  Exited (0) 22 hours ago               myos
31db272773f3  registry.access.redhat.com/ubi7:latest           sleep 40              22 hours ago  Exited (0) 22 hours ago               myos2
9550344cd162  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  21 hours ago  Exited (0) 21 hours ago               myweb
533e4a0c937c  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  21 hours ago  Exited (0) 6 seconds ago              myweb2
[root@node3 ~]# docker rm myweb2
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb2
[root@node3 ~]# 
 s

*PortMapping:

[root@node3 ~]# docker ps 
[root@node3 ~]# docker run -d --name myweb3 -p 8090:8080 registry.access.redhat.com/ubi9/httpd-24

Task:1
[root@node3 ~]# docker ps 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED         STATUS         PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  13 minutes ago  Up 13 minutes                          myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  5 minutes ago   Up 5 minutes   0.0.0.0:8090->8080/tcp  myweb3      
 [root@node3 ~]# docker exec -it myweb3 bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
bash-5.1$ cd /var/www/html
bash-5.1$ cat > index.html
Welcome to my FirstPage!!!
bash-5.1$ 
bash-5.1$ 
bash-5.1$ curl localhost:8080
Welcome to my FirstPage!!!
bash-5.1$ exit
exit
[root@node3 ~]# docker ps
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED         STATUS         PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  15 minutes ago  Up 15 minutes                          myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  7 minutes ago   Up 7 minutes   0.0.0.0:8090->8080/tcp  myweb3
[root@node3 ~]# curl localhost:8090
Welcome to my FirstPage!!!v
[root@node3 ~]#       
      
      Task Completed:  
          Neerav Saxena,  Ratnadeep Singh, Ajay Talla ,Nilayan, Vishnu,Sanchita ,Thamizharasu, Shivaprasad,Santosh,  vidhyadhar , Ipsita  ,Sarthak Atanu,Pankaj,Rajesh, Omkar, Yogesh, Shridhar , Biswaranjan,ChandraDebasish
          
      
      Task:2
Persistent Storage:     
[root@node3 ~]# mkdir -p webcontent/html
[root@node3 ~]# cd webcontent/html
[root@node3 html]# cat >index.html
Welcome to Host Msgs!!!
[root@node3 html]# 
[root@node3 html]# docker run -d --name myweb4 -p 8091:8080 -v /root/webcontent:/var/www:Z registry.access.redhat.com/ubi9/httpd-24:latest 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
b9b910a50a5d8ee32fe78d2446d24999584071ebbf182066999a30e0075f91d6
[root@node3 html]# docker ps 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED         STATUS         PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  54 minutes ago  Up 54 minutes                          myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  46 minutes ago  Up 46 minutes  0.0.0.0:8090->8080/tcp  myweb3
b9b910a50a5d  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  5 seconds ago   Up 5 seconds   0.0.0.0:8091->8080/tcp  myweb4
[root@node3 html]# 
      
[root@node3 html]# docker exec -it myweb4 bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
bash-5.1$ cd /var/www/html
bash-5.1$ ls
index.html
bash-5.1$ cat index.html 
Welcome to Host Msgs!!!
bash-5.1$ curl localhost:8080
Welcome to Host Msgs!!!
bash-5.1$ exit
exit
[root@node3 html]# curl localhost:8091
Welcome to Host Msgs!!!
[root@node3 html]# 
[root@node3 html]# docker ps
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED             STATUS             PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  56 minutes ago      Up 56 minutes                              myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  48 minutes ago      Up 48 minutes      0.0.0.0:8090->8080/tcp  myweb3
b9b910a50a5d  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  About a minute ago  Up About a minute  0.0.0.0:8091->8080/tcp  myweb4
[root@node3 html]# docker stop myweb4
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb4
[root@node3 html]# docker rm myweb4 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb4
[root@node3 html]# 
[root@node3 html]# 
[root@node3 html]# docker run -d --name myweb4 -p 8091:8080 -v /root/webcontent:/var/www:Z registry.access.redhat.com/ubi9/httpd-24:latest 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
40dae19b44ff94569de039be1c0c335578849089b69088a9a695855416ab9d01
[root@node3 html]# curl localhost:8091
Welcome to Host Msgs!!!
[root@node3 html]# docker exec -it myweb4 bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
bash-5.1$ cd /var/www/html
bash-5.1$ ls
index.html
bash-5.1$ cat index.html 
Welcome to Host Msgs!!!
bash-5.1$ exit
exit
[root@node3 html]# cat >>index.html 
This is appended message from host!
[root@node3 html]# 
[root@node3 html]# curl localhost:8091
Welcome to Host Msgs!!!
This is appended message from host!
[root@node3 html]# 
 
This is 3rd mssg from host!
[root@node3 html]# 
[root@node3 html]# 
[root@node3 html]# curl localhost:8091
Welcome to Host Msgs!!!
This is appended message from host!
This is 3rd mssg from host!
[root@node3 html]# docker ps
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED             STATUS             PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  58 minutes ago      Up 58 minutes                              myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  50 minutes ago      Up 50 minutes      0.0.0.0:8090->8080/tcp  myweb3
40dae19b44ff  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  About a minute ago  Up About a minute  0.0.0.0:8091->8080/tcp  myweb4
[root@node3 html]# docker stop myweb4
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb4
[root@node3 html]# docker rm myweb4
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
myweb4
[root@node3 html]# docker run -d --name myweb4 -p 8091:8080 -v /root/webcontent:/var/www:Z registry.access.redhat.com/ubi9/httpd-24:latest 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
161f5bbb793235d0040ef5d70ef9fcc051a39346da26e89cad2a42912eb2c151
[root@node3 html]#

Task:2 Completed: Santosh Ratnadeep,Sarthak, Neerav Saxena,Ajay Talla,ThamizhShivaprasad, Navin,Shridhar Kumar,Omkar,vidhyadhar,Rajesh,Ipsita,BiswaranjanPankajsenthilGDebasish


*Task:3
*Stateful App (mariadb):
    
[root@node3 ~]# docker search mariadb
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
NAME                                                          DESCRIPTION
registry.access.redhat.com/rhscl/mariadb-101-rhel7            MariaDB server 10.1 for OpenShift and genera...
registry.access.redhat.com/openshift3/mariadb-apb             Ansible Playbook Bundle application definiti...
registry.access.redhat.com/rhscl/mariadb-100-rhel7            MariaDB 10.0 SQL database server
registry.access.redhat.com/rhscl/mariadb-102-rhel7            MariaDB is a multi-user, multi-threaded SQL...

[root@node3 ~]# docker run -d --name mydb -p 3306:3306 registry.access.redhat.com/rhscl/mariadb-101-rhel7

Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
Trying to pull registry.access.redhat.com/rhscl/mariadb-101-rhel7:latest...
Getting image source signatures
Checking if image destination supports signatures

Copying blob 3e4c147a12c5 done   | 
Copying blob 3e4c147a12c5 done   | 
Copying blob 18f0f6de4601 done   | 
Copying blob db1d55616933 done   | 
Copying blob d09f4fbfc5a9 done   | 
Copying config 96669f514d done   | 
Writing manifest to image destination
Storing signatures

5e4081f8b69245138e34c8fa77512ae696e98e09b6ab558233c78956c6fb2d7a
[root@node3 ~]# 
[root@node3 ~]# 
[root@node3 ~]# 
[root@node3 ~]# docker ps
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                            COMMAND               CREATED            STATUS            PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  2 hours ago        Up 2 hours                                myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  2 hours ago        Up 2 hours        0.0.0.0:8090->8080/tcp  myweb3
161f5bbb7932  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  About an hour ago  Up About an hour  0.0.0.0:8091->8080/tcp  myweb4
1ffc6f0d029d  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  56 minutes ago     Up 56 minutes     0.0.0.0:8095->8080/tcp  myweb7
b40f19619622  registry.access.redhat.com/ubi9/httpd-24:latest  /usr/bin/run-http...  44 minutes ago     Up 44 minutes     0.0.0.0:8097->8080/tcp  myweb9
[root@node3 ~]# docker ps -a
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                                      COMMAND               CREATED            STATUS                     PORTS                   NAMES
70d66fc22269  registry.access.redhat.com/ubi7:latest                     /bin/bash             24 hours ago       Exited (0) 24 hours ago                            myos
31db272773f3  registry.access.redhat.com/ubi7:latest                     sleep 40              24 hours ago       Exited (0) 24 hours ago                            myos2
9550344cd162  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  24 hours ago       Exited (0) 24 hours ago                            myweb
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago        Up 2 hours                                         myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago        Up 2 hours                 0.0.0.0:8090->8080/tcp  myweb3
161f5bbb7932  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  About an hour ago  Up About an hour           0.0.0.0:8091->8080/tcp  myweb4
e3e3cfcece23  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  59 minutes ago     Exited (1) 59 minutes ago  0.0.0.0:8092->8080/tcp  myweb5
49577ff91f5b  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  57 minutes ago     Exited (1) 57 minutes ago  0.0.0.0:8093->8080/tcp  myweb6
1ffc6f0d029d  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  56 minutes ago     Up 56 minutes              0.0.0.0:8095->8080/tcp  myweb7
f4735c249b99  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  46 minutes ago     Exited (1) 46 minutes ago  0.0.0.0:8096->8080/tcp  myweb8
b40f19619622  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  45 minutes ago     Up 45 minutes              0.0.0.0:8097->8080/tcp  myweb9
5e4081f8b692  registry.access.redhat.com/rhscl/mariadb-101-rhel7:latest  run-mysqld            10 seconds ago     Exited (1) 9 seconds ago   0.0.0.0:3306->3306/tcp  mydb
[root@node3 ~]# docker logs mydb
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
=> sourcing 20-validate-variables.sh ...
You must either specify the following environment variables:
  MYSQL_USER (regex: '^[a-zA-Z0-9_]+$')
  MYSQL_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
  MYSQL_DATABASE (regex: '^[a-zA-Z0-9_]+$')
Or the following environment variable:
  MYSQL_ROOT_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$')
Or both.
Optional Settings:
  MYSQL_LOWER_CASE_TABLE_NAMES (default: 0)
  MYSQL_LOG_QUERIES_ENABLED (default: 0)
  MYSQL_MAX_CONNECTIONS (default: 151)
  MYSQL_FT_MIN_WORD_LEN (default: 4)
  MYSQL_FT_MAX_WORD_LEN (default: 20)
  MYSQL_AIO (default: 1)
  MYSQL_KEY_BUFFER_SIZE (default: 32M or 10% of available memory)
  MYSQL_MAX_ALLOWED_PACKET (default: 200M)
  MYSQL_TABLE_OPEN_CACHE (default: 400)
  MYSQL_SORT_BUFFER_SIZE (default: 256K)
  MYSQL_READ_BUFFER_SIZE (default: 8M or 5% of available memory)
  MYSQL_INNODB_BUFFER_POOL_SIZE (default: 32M or 50% of available memory)
  MYSQL_INNODB_LOG_FILE_SIZE (default: 8M or 15% of available memory)
  MYSQL_INNODB_LOG_BUFFER_SIZE (default: 8M or 15% of available memory)

For more information, see https://github.com/sclorg/mariadb-container
[root@node3 ~]# docker 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
368645d3bdc25489e926050a169143090effe7ef92d29f48b3c8f4f505b4634f
[root@node3 ~]# docker ps
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                                      COMMAND               CREATED            STATUS            PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago        Up 2 hours                                myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago        Up 2 hours        0.0.0.0:8090->8080/tcp  myweb3
161f5bbb7932  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  About an hour ago  Up About an hour  0.0.0.0:8091->8080/tcp  myweb4
1ffc6f0d029d  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  58 minutes ago     Up 58 minutes     0.0.0.0:8095->8080/tcp  myweb7
b40f19619622  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  46 minutes ago     Up 46 minutes     0.0.0.0:8097->8080/tcp  myweb9
368645d3bdc2  registry.access.redhat.com/rhscl/mariadb-101-rhel7:latest  run-mysqld            3 seconds ago      Up 3 seconds      0.0.0.0:3306->3306/tcp  mydb2
[root@node3 ~]# docker exec -it mydb2 bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
bash-4.2$ mysql -u root
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 2
Server version: 10.1.29-MariaDB MariaDB Server

Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.01 sec)

MariaDB [(none)]> exit
Bye
bash-4.2$ exit
exit
[root@node3 ~]#


Task:3-Completed: PankajRatnadeep,Ipsita,Santosh,Ajay TallaDebasishsenthil G,Omkar ,Sanchita,Biswaranjan,Thamizh,Nilayan,Neerav,Rajesh, Shivaprasad, Sarthak
    
*
Task:4
 Image Build:
     
[root@node3 ~]# vim Containerfile 
FROM docker.io/redhat/ubi8
MAINTAINER murali@gmail.com

LABEL description="A apache server for testing purpose"
 
RUN yum install -y httpd && \
    yum clean all 
RUN echo "Hello from Containerfile"> /var/www/html/index.html
:
EXPOSE 80
CMD ["httpd", "-D", "FOREGROUND"]

[root@node3 ~]# 

[root@node3 ~]# docker build -t myownimg:1.0 .  
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
STEP 1/8: FROM docker.io/redhat/ubi8
Trying to pull docker.io/redhat/ubi8:latest...
Getting image source signatures
Copying blob 79c20e727b94 done   | 
Copying config bb4496e662 done   | 
Writing manifest to image destination
STEP 2/8: MAINTAINER murali@gmail.com
--> 4699220362fc
STEP 3/8: LABEL description="A apache server for testing purpose"
--> 8550e45325b5
STEP 4/8: RUN yum install -y httpd 
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

Red Hat Universal Base Image 8 (RPMs) - BaseOS  1.9 MB/s | 723 kB     00:00    
Red Hat Universal Base Image 8 (RPMs) - AppStre  11 MB/s | 3.4 MB     00:00    
Red Hat Universal Base Image 8 (RPMs) - CodeRea 734 kB/s | 186 kB     00:00    
Dependencies resolved.
====================================================================================================
 Package              Arch    Version                                    Repository             Size
====================================================================================================
Installing:
 httpd                x86_64  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms  1.4 M
Installing dependencies:
 apr                  x86_64  1.6.3-12.el8                               ubi-8-appstream-rpms  130 k
 apr-util             x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms  106 k
 httpd-filesystem     noarch  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms   45 k
 httpd-tools          x86_64  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms  112 k
 mailcap              noarch  2.1.48-3.el8                               ubi-8-baseos-rpms      39 k
 mod_http2            x86_64  1.15.7-10.module+el8.10.0+22335+bb25e47a.1 ubi-8-appstream-rpms  156 k
 redhat-logos-httpd   noarch  84.5-2.el8                                 ubi-8-baseos-rpms      29 k
Installing weak dependencies:
 apr-util-bdb         x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms   25 k
 apr-util-openssl     x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms   27 k
Enabling module streams:
 httpd                        2.4                                                                   

Transaction Summary
====================================================================================================
Install  10 Packages

Total download size: 2.1 M
Installed size: 5.5 M
Downloading Packages:
(1/10): apr-1.6.3-12.el8.x86_64.rpm             1.2 MB/s | 130 kB     00:00    
(2/10): mailcap-2.1.48-3.el8.noarch.rpm         363 kB/s |  39 kB     00:00    
(3/10): apr-util-1.6.1-9.el8.x86_64.rpm          12 MB/s | 106 kB     00:00    
(4/10): apr-util-bdb-1.6.1-9.el8.x86_64.rpm     3.4 MB/s |  25 kB     00:00    
(5/10): apr-util-openssl-1.6.1-9.el8.x86_64.rpm 2.5 MB/s |  27 kB     00:00    
(6/10): httpd-filesystem-2.4.37-65.module+el8.1 5.0 MB/s |  45 kB     00:00    
(7/10): httpd-tools-2.4.37-65.module+el8.10.0+2 7.7 MB/s | 112 kB     00:00    
(8/10): httpd-2.4.37-65.module+el8.10.0+22196+d  23 MB/s | 1.4 MB     00:00    
(9/10): mod_http2-1.15.7-10.module+el8.10.0+223 5.1 MB/s | 156 kB     00:00    
(10/10): redhat-logos-httpd-84.5-2.el8.noarch.r  98 kB/s |  29 kB     00:00    
--------------------------------------------------------------------------------
Total                                           6.6 MB/s | 2.1 MB     00:00     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1 
  Installing       : apr-1.6.3-12.el8.x86_64                               1/10 
  Running scriptlet: apr-1.6.3-12.el8.x86_64                               1/10 
  Installing       : apr-util-bdb-1.6.1-9.el8.x86_64                       2/10 
  Installing       : apr-util-openssl-1.6.1-9.el8.x86_64                   3/10 
  Installing       : apr-util-1.6.1-9.el8.x86_64                           4/10 
  Running scriptlet: apr-util-1.6.1-9.el8.x86_64                           4/10 
  Installing       : httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931    5/10 
  Running scriptlet: httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    6/10 
  Installing       : httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    6/10 
  Installing       : redhat-logos-httpd-84.5-2.el8.noarch                  7/10 
  Installing       : mailcap-2.1.48-3.el8.noarch                           8/10 
  Installing       : mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a    9/10 
  Installing       : httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x   10/10 
  Running scriptlet: httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x   10/10 
  Verifying        : mailcap-2.1.48-3.el8.noarch                           1/10 
  Verifying        : redhat-logos-httpd-84.5-2.el8.noarch                  2/10 
  Verifying        : apr-1.6.3-12.el8.x86_64                               3/10 
  Verifying        : apr-util-1.6.1-9.el8.x86_64                           4/10 
  Verifying        : apr-util-bdb-1.6.1-9.el8.x86_64                       5/10 
  Verifying        : apr-util-openssl-1.6.1-9.el8.x86_64                   6/10 
  Verifying        : httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x    7/10 
  Verifying        : httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    8/10 
  Verifying        : httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931    9/10 
  Verifying        : mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a   10/10 
Installed products updated.

Installed:
  apr-1.6.3-12.el8.x86_64                                                       
  apr-util-1.6.1-9.el8.x86_64                                                   
  apr-util-bdb-1.6.1-9.el8.x86_64                                               
  apr-util-openssl-1.6.1-9.el8.x86_64                                           
  httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x86_64                       
  httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d82931da.2.noarch            
  httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931da.2.x86_64                 
  mailcap-2.1.48-3.el8.noarch                                                   
  mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a.1.x86_64                   
  redhat-logos-httpd-84.5-2.el8.noarch                                          

Complete!
--> 0377cb424996
STEP 5/8: RUN yum clean all 
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

25 files removed
--> 66b86aadccb6
STEP 6/8: RUN echo "Hello from Containerfile"> /var/www/html/index.html
--> b51473075e6d
STEP 7/8: EXPOSE 80
--> d837fa370fed
STEP 8/8: CMD ["httpd", "-D", "FOREGROUND"]
COMMIT myownimg:1.0
--> 9b79c25ffeb4
Successfully tagged localhost/myownimg:1.0
9b79c25ffeb4171ea1feb930b3faeeeee8ee0777757e2d0c8152cd1d5d3264c1
[root@node3 ~]# 
    
[root@node3 ~]# docker images
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
REPOSITORY                                          TAG         IMAGE ID      CREATED         SIZE
localhost/myownimg                                  1.0         9b79c25ffeb4  31 seconds ago  246 MB
registry.access.redhat.com/ubi9/httpd-24            latest      f9547578a2f0  9 days ago      326 MB
docker.io/redhat/ubi8                               latest      bb4496e662fb  9 days ago      213 MB
docker.io/library/busybox                           latest      af4709625109  4 months ago    4.52 MB
registry.access.redhat.com/ubi7                     latest      a084eb42a557  8 months ago    219 MB
registry.access.redhat.com/rhscl/mariadb-101-rhel7  latest      96669f514df0  5 years ago     469 MB
[root@node3 ~]# docker push localhost/myownimg
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
Error: localhost/myownimg: image not known
[root@node3 ~]# vim Containerfile 
[root@node3 ~]# docker build -t mysecownimg:1.1 .
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
STEP 1/7: FROM docker.io/redhat/ubi8
STEP 2/7: MAINTAINER murali@gmail.com
--> Using cache 4699220362fc07375d9aaddbf23decfd945d082bcf8b090053d623ec7a1ea8c7
--> 4699220362fc
STEP 3/7: LABEL description="A apache server for testing purpose"
--> Using cache 8550e45325b56459ff5d31f68453557b860d44b87df1bf5d5d887f77605fd627
--> 8550e45325b5
STEP 4/7: RUN yum install -y httpd &&     yum clean all 
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

Red Hat Universal Base Image 8 (RPMs) - BaseOS  2.8 MB/s | 723 kB     00:00    
Red Hat Universal Base Image 8 (RPMs) - AppStre  12 MB/s | 3.4 MB     00:00    
Red Hat Universal Base Image 8 (RPMs) - CodeRea 966 kB/s | 186 kB     00:00    
Dependencies resolved.
====================================================================================================
 Package              Arch    Version                                    Repository             Size
====================================================================================================
Installing:
 httpd                x86_64  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms  1.4 M
Installing dependencies:
 apr                  x86_64  1.6.3-12.el8                               ubi-8-appstream-rpms  130 k
 apr-util             x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms  106 k
 httpd-filesystem     noarch  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms   45 k
 httpd-tools          x86_64  2.4.37-65.module+el8.10.0+22196+d82931da.2 ubi-8-appstream-rpms  112 k
 mailcap              noarch  2.1.48-3.el8                               ubi-8-baseos-rpms      39 k
 mod_http2            x86_64  1.15.7-10.module+el8.10.0+22335+bb25e47a.1 ubi-8-appstream-rpms  156 k
 redhat-logos-httpd   noarch  84.5-2.el8                                 ubi-8-baseos-rpms      29 k
Installing weak dependencies:
 apr-util-bdb         x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms   25 k
 apr-util-openssl     x86_64  1.6.1-9.el8                                ubi-8-appstream-rpms   27 k
Enabling module streams:
 httpd                        2.4                                                                   

Transaction Summary
====================================================================================================
Install  10 Packages

Total download size: 2.1 M
Installed size: 5.5 M
Downloading Packages:
(1/10): mailcap-2.1.48-3.el8.noarch.rpm         388 kB/s |  39 kB     00:00    
(2/10): apr-util-1.6.1-9.el8.x86_64.rpm         8.5 MB/s | 106 kB     00:00    
(3/10): apr-1.6.3-12.el8.x86_64.rpm             1.1 MB/s | 130 kB     00:00    
(4/10): apr-util-bdb-1.6.1-9.el8.x86_64.rpm     2.2 MB/s |  25 kB     00:00    
(5/10): apr-util-openssl-1.6.1-9.el8.x86_64.rpm 3.0 MB/s |  27 kB     00:00    
(6/10): httpd-filesystem-2.4.37-65.module+el8.1 7.4 MB/s |  45 kB     00:00    
(7/10): httpd-tools-2.4.37-65.module+el8.10.0+2 8.2 MB/s | 112 kB     00:00    
(8/10): mod_http2-1.15.7-10.module+el8.10.0+223  12 MB/s | 156 kB     00:00    
(9/10): httpd-2.4.37-65.module+el8.10.0+22196+d  23 MB/s | 1.4 MB     00:00    
(10/10): redhat-logos-httpd-84.5-2.el8.noarch.r  89 kB/s |  29 kB     00:00    
--------------------------------------------------------------------------------
Total                                           6.1 MB/s | 2.1 MB     00:00     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1 
  Installing       : apr-1.6.3-12.el8.x86_64                               1/10 
  Running scriptlet: apr-1.6.3-12.el8.x86_64                               1/10 
  Installing       : apr-util-bdb-1.6.1-9.el8.x86_64                       2/10 
  Installing       : apr-util-openssl-1.6.1-9.el8.x86_64                   3/10 
  Installing       : apr-util-1.6.1-9.el8.x86_64                           4/10 
  Running scriptlet: apr-util-1.6.1-9.el8.x86_64                           4/10 
  Installing       : httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931    5/10 
  Running scriptlet: httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    6/10 
  Installing       : httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    6/10 
  Installing       : redhat-logos-httpd-84.5-2.el8.noarch                  7/10 
  Installing       : mailcap-2.1.48-3.el8.noarch                           8/10 
  Installing       : mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a    9/10 
  Installing       : httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x   10/10 
  Running scriptlet: httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x   10/10 
  Verifying        : mailcap-2.1.48-3.el8.noarch                           1/10 
  Verifying        : redhat-logos-httpd-84.5-2.el8.noarch                  2/10 
  Verifying        : apr-1.6.3-12.el8.x86_64                               3/10 
  Verifying        : apr-util-1.6.1-9.el8.x86_64                           4/10 
  Verifying        : apr-util-bdb-1.6.1-9.el8.x86_64                       5/10 
  Verifying        : apr-util-openssl-1.6.1-9.el8.x86_64                   6/10 
  Verifying        : httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x    7/10 
  Verifying        : httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d    8/10 
  Verifying        : httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931    9/10 
  Verifying        : mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a   10/10 
Installed products updated.

Installed:
  apr-1.6.3-12.el8.x86_64                                                       
  apr-util-1.6.1-9.el8.x86_64                                                   
  apr-util-bdb-1.6.1-9.el8.x86_64                                               
  apr-util-openssl-1.6.1-9.el8.x86_64                                           
  httpd-2.4.37-65.module+el8.10.0+22196+d82931da.2.x86_64                       
  httpd-filesystem-2.4.37-65.module+el8.10.0+22196+d82931da.2.noarch            
  httpd-tools-2.4.37-65.module+el8.10.0+22196+d82931da.2.x86_64                 
  mailcap-2.1.48-3.el8.noarch                                                   
  mod_http2-1.15.7-10.module+el8.10.0+22335+bb25e47a.1.x86_64                   
  redhat-logos-httpd-84.5-2.el8.noarch                                          

Complete!
Updating Subscription Management repositories.
Unable to read consumer identity

This system is not registered with an entitlement server. You can use subscription-manager to register.

25 files removed
--> 3bea40b9a36b
STEP 5/7: RUN echo "Hello from Containerfile"> /var/www/html/index.html
--> b36e5749bb81
STEP 6/7: EXPOSE 80
--> eeb9f634213f
STEP 7/7: CMD ["httpd", "-D", "FOREGROUND"]
COMMIT mysecownimg:1.1
--> d26499667cc4
Successfully tagged localhost/mysecownimg:1.1
d26499667cc4fae3dfa6e222e109ae2b9a70ef530fe4d7954dc9954993a770f4
[root@node3 ~]# docker images
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
REPOSITORY                                          TAG         IMAGE ID      CREATED        SIZE
localhost/mysecownimg                               1.1         d26499667cc4  3 seconds ago  234 MB
localhost/myownimg                                  1.0         9b79c25ffeb4  3 minutes ago  246 MB
registry.access.redhat.com/ubi9/httpd-24            latest      f9547578a2f0  9 days ago     326 MB
docker.io/redhat/ubi8                               latest      bb4496e662fb  9 days ago     213 MB
docker.io/library/busybox                           latest      af4709625109  4 months ago   4.52 MB
registry.access.redhat.com/ubi7                     latest      a084eb42a557  8 months ago   219 MB
registry.access.redhat.com/rhscl/mariadb-101-rhel7  latest      96669f514df0  5 years ago    469 MB

[root@node3 ~]# docker run -d --name myowncont localhost/myownimg:1.0
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
277b1915a6fbf6b927a2388630c783525fcc5fca0ce363b2ec7bc09f7a6f2c51
[root@node3 ~]# docker ps 
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
CONTAINER ID  IMAGE                                                      COMMAND               CREATED         STATUS         PORTS                   NAMES
dfb353e99bf6  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  3 hours ago     Up 3 hours                             myweb2
a37b0a355123  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  3 hours ago     Up 3 hours     0.0.0.0:8090->8080/tcp  myweb3
161f5bbb7932  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago     Up 2 hours     0.0.0.0:8091->8080/tcp  myweb4
1ffc6f0d029d  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago     Up 2 hours     0.0.0.0:8095->8080/tcp  myweb7
b40f19619622  registry.access.redhat.com/ubi9/httpd-24:latest            /usr/bin/run-http...  2 hours ago     Up 2 hours     0.0.0.0:8097->8080/tcp  myweb9
92eb6f2dd6a5  registry.access.redhat.com/rhscl/mariadb-101-rhel7:latest  run-mysqld            24 minutes ago  Up 24 minutes  0.0.0.0:3306->3306/tcp  mydb2
277b1915a6fb  localhost/myownimg:1.0                                     httpd -D FOREGROU...  5 seconds ago   Up 5 seconds                           myowncont
[root@node3 ~]# docker exec -it myowncont bash
Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
[root@277b1915a6fb /]# pwd
/
[root@277b1915a6fb /]# cd /var/www/html
[root@277b1915a6fb html]# ls
index.html
[root@277b1915a6fb html]# cat index.html 
Hello from Containerfile
[root@277b1915a6fb html]# curl localhost:80
Hello from Containerfile
[root@277b1915a6fb html]# curl localhost
Hello from Containerfile
[root@277b1915a6fb html]# exit
exit
[root@node3 ~]#
    
    Task:4 - Completed: Debasish Ratnadeep,Neerav, vidhyadhar,Ajay Talla,Rajesh,Santosh,Pankaj,IpsitasenthilG, Sanchita,Sarthak,Biswaranjan
    
   03Feb2025:


*The below steps (1-7) should be running in all the nodes: 
Task:5
Step:1 
[root@worker2 ~]# cat /etc/hosts 
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6 
 
10.0.7.1    master.example.com master systemctl enable --now kubelet 
10.0.7.2    node1.example.com node1 
10.0.7.3    node2.example.com node2 
 
 
Step:2 
swapoff -a 
systemctl status firewalld ; systemctl stop firewalld ; systemctl disable firewalld 
# Set SELinux in permissive mode (effectively disabling it) 
setenforce 0 
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config 

 
Step:3 
yum install wget -y 
wget https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.6.10-3.1.el7.x86_64.rpm 
yum localinstall containerd.io-1.6.10-3.1.el7.x86_64.rpm -y 
 
systemctl start  containerd.service
systemctl enable containerd.service 
systemctl status containerd.service 
 
 
Step:4 
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf 
overlay 
br_netfilter 
EOF 
 
sudo modprobe overlay 
sudo modprobe br_netfilter 
 
Step:5 
# sysctl params required by setup, params persist across reboots 
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf 
net.bridge.bridge-nf-call-iptables  = 1 
net.bridge.bridge-nf-call-ip6tables = 1 
net.ipv4.ip_forward = 1 
EOF 
 
# Apply sysctl params without reboot 
sudo sysctl --system 
 
Step:6 
 cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo 
[kubernetes] 
name=Kubernetes 
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/ 
enabled=1 
gpgcheck=1 
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key 
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni 
EOF 
 
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes 
systemctl enable --now kubelet 
 
 
Step:7 
kubeadm init phase preflight 
 Note: IF there is any error in above command, follow below steps 
 
[root@master ~]# kubeadm init phase preflight 
I0621 07:18:50.195909    5747 version.go:256] remote version is much newer: v1.30.2; falling back to: stable-1.29 
[preflight] Running pre-flight checks 
error execution phase preflight: [preflight] Some fatal errors occurred: 
        [ERROR CRI]: container runtime is not running: output: time="2024-06-21T07:18:50Z" level=fatal msg="validate service connection: validate CRI v1 runtime API for endpoint \"unix:///var/run/containerd/containerd.sock\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService" 
, error: exit status 1 systemctl restart containerd.service
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...` 
To see the stack trace of this error execute with --v=5 or higher 
 
 #rm /etc/containerd/config.toml 
#systemctl restart containerd.service 
 
Now preflight ... 
 
#kubeadm init phase preflight 
------this should be resulted without any errors------------ 

kubeadm init --pod-network-cidr




[ERROR CRI]: container runtime is not running: output: time="2025-02-04T14:16:51+05:30" level=fatal msg="validate service connection: validate CRI v1 runtime API for endpoint \"unix:///var/run/containerd/containerd.sock\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService"
, error: exit status 1

sudo nano /etc/containerd/config.toml
sudo systemctl restart containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl restart kubelet
kubectl get nodes

kubectl get pods -A -o wide


kubeadm init phase preflight 
ERROR FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml]: /etc/kubernetes/manifests/kube-apiserver.yaml already exists
kubectl get nodes
sudo kubeadm reset -f
sudo rm -rf /etc/kubernetes/
sudo rm -rf /var/lib/etcd
sudo systemctl restart containerd kubelet
sudo kubeadm init
sudo rm -f /etc/kubernetes/manifests/kube-apiserver.yaml
kubeadm init


sudo kubeadm reset;
sudo rm -rf /etc/cni/net.d;
sudo rm -rf /var/lib/etcd;
sudo rm -rf /etc/kubernetes;
sudo rm -rf ~/.kube;
sudo systemctl restart docker;
sudo systemctl restart kubelet;

kubectl delete pod coredns-76f75df574-k5w98

[root@node1 ~]# kubectl get node 
E0205 12:41:57.708870   21393 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:41:57.709986   21393 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:41:57.712139   21393 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:41:57.713349   21393 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:41:57.714479   21393 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
The connection to the server localhost:8080 was refused - did you specify the right host or port?

Feb 05 07:04:30 node1 systemd[1]: Reached target Network is Online.
[root@node1 ~]# kubectl get pod -A 
E0205 12:47:55.027853   22218 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:47:55.029082   22218 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:47:55.030578   22218 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:47:55.031745   22218 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
E0205 12:47:55.032554   22218 memcache.go:265] couldn't get current server API group list: Get "http://localhost:8080/api?timeout=32s": dial tcp [::1]:8080: connect: connection refused
The connection to the server localhost:8080 was refused - did you specify the right host or port?

systemctl status kubelet
kubeadm join 10.0.15.56:6443 --token 2y1d4v.kkmf0vvwfh3zulzn --discovery-token-ca-cert-hash sha256:c8e40eb3803e74c7e4a31db8f02abdbd9b8512e9aac838ea4a818a2c85bdbd5e

Note if the above steps not working, pls follow the below procedure:

Master Node:
#swapoff -a    -----> edit /etc/fstab file and comment that swap line
#kubeadm reset
#kubeadm init phase preflight
#kubeadm init --pod-network-cidr=192.168.0.0/24

Note: collect the last few lines and store in "join" file
kubectl get nodes
#export KUBECONFIG=/etc/kubernetes/admin.conf
#kubectl get nodes  ---> now this should work

Join command to create
#kubeadm token create --print-join-command 

Worker Nodes:

#swapoff -a      ---> edit /etc/fstab line 
#systemctl restart kubelet
#kubeadm reset
#kubeadm init phase preflight

Now use join command --> take it from master
#kubeadm .......(refer the join command as above)
Now check in Master, node1 should be Ready state

Follow the same above procedure for node2 also.
=============================================================
Static Pods:
    
    master@cd /etc/kubernetes/manifests
    master@ls
    master@kube-scheduler  etcd-msater controller-manager kube-apiserver
    
    Note: these above components are referred to as Static pods - if they remove from that location, then you cannot able to find the resective pods. 

   YAML:

1.Dictionary words:
    name=raj
2. Listing
     fruits:
        - apple
        - orange
        - banana
3. Parent/Child Relationship (Indentation)
Linux: 
    useradd u10    
Yaml:
    user:
    name: u10
    state: present    
----------------------------
   user:    ---> Py Module
       name: u10    ---> prop of the module
       state: present    ---->  prop of the module

Kubernetes key properties:
    1. apiVersion: v1
    2. kind: object (p
    3. metadata
    4. spec
    
    
kubectl label node node2 env=prod
v-eth is schedule for apache 
F5 device
Port is identified by label tag in the template. 
Kubeproxy configuration 

kubectl get deployments --all-namespaces -o wide | grep <pod-name>
kubectl describe pod <pod-name>
kubectl create -f deployment-hostpv.yml 

Command LIST on Worker Node
	1. crictl ps
	2. ls mode | grep overlay
	3. ls mode | grep netfilter
	4. getenforce
	5. kubeadm init preflight

Command list on Master Node 


Graphana & Promethius is a monitoring tool.  



Master Node:
#swapoff -a
#export KUBECONFIG=/etc/kubernetes/admin.conf
#systemctl restart kubelet
#kubectl get nodes
kubectl get nodes
Worker Nodes:

#swapoff -a
#systemctl restart kubelet


Limits & Resources 
Bare min resources requirements. 
Micro services has a limit factor where the resrouces can be limited with a highest threshold. 
when the schedular talks with a kubelet it specifies the limit. 
If the resources max is reached the pod is terminated. 
Limit request is given by application 

Network Policy 
Deny & Allow rule to allow communication across pods. 
Ingress Policy : Incoming Traffic
Egress Policy : Outbound Traffic
It is deny all but on top of that if is allow then it would be allowing the respective ip 


In kub only 1 networking concept can be there either flannel or calico 

Roles : 
    
	1.     ABAC - applies in the namespace level 
	2.     RBAC 

Local role inside the project. 
Cluster role refer to the whole project plane. 

Rolebinding is binding a role to a defined role
Roles are defined already, rolebinding needs to be declared 

vim role.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: myrole
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list","get","create","update","delete"]
[root@master ~]# kubectl create -f role.yml
[root@master ~]# kubectl get role
[root@master ~]# kubectl get role -o yaml -------->>>> Online checking

RoleBinding:

[root@master ~]# vim rolebinding.yml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: myrole-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: myrole
  apiGroup: rbac.authorization.k8s.io

[root@master ~]# kubectl create -f rolebinding.yml
[root@master ~]# kubectl create -f rolebinding.yml
[root@master ~]# kubectl get rolebinding
[root@master ~]# kubectl get rolebinding myrole-binding -o yaml
[root@master ~]# kubectl describe role myrole
root@master ~]# kubectl describe rolebinding myrole-binding

*Minikube install
node3 # vim /etc/hosts    
     ---------entry here--------
# dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
If you get any error says not able to resolv... then check your /etc/resolv.conf

#vim /etc/resolv.conf
search example.com
nameserver  8.8.8.8
-----save----

# dnf repolist
# dnf install docker-ce docker-ce-cli containerd.io -y
It throws some conflict issue.....
Known issue: 
#yum remove -y runc*  --> to remove runc* packages
 
 # dnf install docker-ce docker-ce-cli containerd.io -y
 
# systemctl enable docker
# systemctl start docker
# usermod -aG docker $USER
# newgrp docker
# curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
# cp kubectl /usr/local/bin/ && sudo chmod +x /usr/local/bin/kubectl
# kubectl version --client
# curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
# sudo install minikube-linux-amd64 /usr/local/bin/minikube
# minikube start --driver docker  --force
#minikube status
# kubectl cluster-info
# kubectl get nodes

# kubectl create deployment test-minikube --image=k8s.gcr.io/echoserver:1.10 
deployment.apps/test-minikube created
# kubectl get deploy
# kubectl get pod -o wide


Helm Chart : used for managing the packages across the cluster for managing the life cycle management. 

nuBDAdWc4OJX6ny6aGIhg29QaWtbL5QAYS9ydPpm


Commands during maintenance. 
	* kubectl cordon : cannot run any scheduled tasks on it 
	* kubectl drained : resources are drained for that node, podes are moved to other nodes. 
	* kubectl uncordon 
	* kubectl drain node2 --ignore-daemonsets


Failed to restart kubelet.service: Unit kubelet.service not found


Ansible >

Yaml is the coding lanugae used by Ansible. 

Advantages 
a. Simple and Fast
b. Agentless 
c. Idempotent 

Certificate should be properly managed. 
Ansible master is there and it is agent less 

	1. Ansible
	2. puppetlabs
	3. chef
	4. bladelogic 


Master is known as control plane and worker nodes are know as Managedhosts 
redhat
key saved under /home/student/.ssh/rsa_id

Kubernates has a separate user named operators


[student@master .ssh]$ ssh devops@node1 -C "hostname"
node1
-C is the command 


Sudoers

[root@node1 sudoers.d]# cd /etc/sudoers.d/
/etc/sudoers.d
[root@node1 sudoers.d]# vim devops
#username     #hostname      #commandname
devops        ALL=(ALL)       NOPASSWD: ALL
[root@node1 sudoers.d]# 

[root@node2 sudoers.d]# cd /etc/sudoers.d/
/etc/sudoers.d
[root@node2 sudoers.d]# vim devops 
devops    ALL=(ALL)    NOPASSWD: ALL
[root@node2 sudoers.d]# 


From Master Test:
 [student@master ~]$ ssh devops@node1 -C "sudo useradd u21"
 [student@master ~]$ ssh devops@node1 cat /etc/passwd | grep "u21"
u21:x:1002:1002::/home/u21:/bin/bash

Ansible is only installed in master since it it agentless
	* cd /etc/ansib
	* yum install ansible -y : -y without prompt
	* yum list installed python 
	* rpm -qa | grep -i python
	* yum : yellow doc update and modify 




only root user can edit anything under etc directory 
/etc/ansible/ansible.cfg - this is non-editable. 
whereever there is a ansible.cfg file this would take precedence over the original file in /etc/ansible/ansible.cfg
this is just the db of files


ansible -m command -a "hostname" node1
-a is the argument for the command. 
ansible.cfg has several sections
cat /etc/ansible/ansible.cfg | grep '^


Privilege_escalation/Adhoc-commands:
    
[student@master ~]$ vim ansible.cfg 
[defaults]
inventory=/home/student/inventory
remote_user=devops

[privilege_escalation]
become=True
become_method=sudo
become_user=root
become_ask_pass=False
[student@master ~]$ 

[student@master ~]$ ansible -m user -a "name=u36 state=present" node1

Playbook 
It generally starts with 3 dots and ends with 3 dots
	1. Global Parameters : you can put in ignore_errors over here. 
	2. - (hypen) defines a task
	3. all tasks are executed on the permieter called hosts
	4. - (hypen) indentation defines plays and tasks. 

.vimrc   file needs to be created. This stands for run configuration. 

Playbook can be ran serially or paralelly. 
Generally parallelism is followed so it takes up a set of servers 
we specify in fork=5
but serial would actually override the parallelism part.0

Variable :
    host_variable 
    
    
    
    
    docker run -d --name myfirstcontainer -p 8880:80 httpd
    docker run -d --name mysecondcontainer -p 8888:80 -v /webcontent/html:/var/www/html httpd
    cd /var/www/html
    vi index.html
    The IP address of this container is <<IP-Address>>
    
    
    docker exec -it mysecondcontainer sh
    cd /var/www/html
    # cat>index.html
The IP address of this container is 10.0.15.59
    
    docker search ubi
    docker run --name simplecontainer registry.access.redhat.com/ubi7 sleep 100 
docker pull registry.access.redhat.com/ubi8/ubi
docker run --name simplecontainer ubi8/ubi sleep 100
docker ps
docker ps -a

ocker: Error response from daemon: pull access denied for ubi7/ubi, repository does not exist or may require 'docker login': denied: requested access to the resource is denied

docker pull registry.access.redhat.com/ubi7/ubi
docker login registry.access.redhat.com


docker search mysql
docker pull mysql
docker run -d --name dbcontainer -e MYSQL_ROOT_PASSWORD=mysecretpassword mysql
docker ps
docker exec -it dbcontainer mysql -u root -p


kubectl create namespace exkube

vi echoserver-deployment.yaml 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: echo-exkube
  namespace: exkube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo-studentX
  template:
    metadata:
      labels:
        app: echo-studentX
    spec:
      containers:
      - name: echo-exkube-cont
        image: registry.k8s.io/echoserver:1.9 # You can replace this with nginx or httpd if needed
        ports:
        - containerPort: 8080
       
       
        kubectl apply -f echoserver-deployment.yaml
        
        kubectl get deployments -n exkube
        kubectl get all -n exkube

        
        kubectl config set-context --current --namespace=exkube
        
        kubectl scale deployment echo-exkube -n exkube --replicas=3

kubectl expose deployment echo-exkube -n exkube --type=NodePort --port=8080 --target-port=8080 --name=echo-service --node-port=31202
error: unknown flag: --node-port
kubectl expose deployment echo-exkube -n exkube --type=NodePort --port=8080 --target-port=8080 --name=echo-service --node-port=31202


apiVersion: v1
kind: Service
metadata:
  name: echo-service
  namespace: exkube
spec:
  selector:
    app: echo-studentX  # Ensure this label matches the label of your pods
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 31202
  type: NodePort
Create a file called nodeport-service.yaml with the following content

kubectl apply -f nodeport-service.yaml
kubectl apply -f nodeport-service.yaml
kubectl get services -n exkube


kubectl describe svc <service name> -n exkub



kubectl run random-logger-studentx -n default --image=chentex/random-logger --restart=Never


kubectl get nodes --show-labels
kubectl label nodes node2 key=value
kubectl label nodes node2 env=prod

vi nginx-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-studentx-pod
  namespace: mytcs
spec:
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: env
                operator: In
                values:
                  - studentX

kubectl apply -f nginx-pod.yaml
kubectl get pod nginx-studentx-pod -n mytcs -o wide

apiVersion: v1
kind: Pod
metadata:
  name: nginx-studentx-pod
  namespace: mytcs
spec:
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: env
                operator: In
                values:
                  - prod
  kubectl delete pod nginx-prod-pod -n mytcs
  
  
apiVersion: v1
kind: Pod
metadata:
  name: nginx-studentX-pod
  namespace: mytcs
spec:
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 80
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: env
                operator: In
                values:
                  - prod
~                        


apiVersion: v1
kind: Pod
metadata:
  name: simple-pod-kube
  namespace: machinelearning
spec:
  containers:
  - name: simple-container
    image: nginx  
    resources:
      limits:
        cpu: "750m"
        memory: "500Mi"
      requests:
        cpu: "500m"  
        memory: "300Mi"

kubectl get pod simple-pod-kube -n machinelearning


docker rm <container-name-or-id>













































